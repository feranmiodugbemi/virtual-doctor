from flask import Flask, render_template, request, jsonify, session, redirect, send_file
from flask_session import Session
from datetime import timedelta
from flask_cors import CORS
import os
from dotenv import load_dotenv
import json
import requests
from redis import Redis
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.barcharts import VerticalBarChart
import datetime
import io

load_dotenv()

app = Flask(__name__)

def header_footer(canvas, doc):
    # Header
    canvas.saveState()
    canvas.setFont('Helvetica-Bold', 12)
    canvas.drawString(72, 750, "Medical Report")
    canvas.setFont('Helvetica', 9)
    canvas.drawString(72, 735, "Generated by AI Medical Assistant")
    canvas.drawString(440, 750, f"Date: {datetime.datetime.now().strftime('%Y-%m-%d')}")
    canvas.line(72, 730, 540, 730)
    
    # Footer
    canvas.setFont('Helvetica', 9)
    canvas.drawString(72, 50, "Confidential")
    canvas.drawString(500, 50, f"Page {doc.page}")
    canvas.line(72, 65, 540, 65)
    canvas.restoreState()

def generate_summary(conversation):
    diagnosed_disease = ""
    treatment = ""
    symptoms = ""

    for entry in conversation:
        if entry['role'] == "assistant" and entry['content'].startswith("Diagnosed Disease:"):
            parts = entry['content'].split(", Treatment is:")
            diagnosed_disease = parts[0].replace("Diagnosed Disease:", "").strip()
            treatment = parts[1].strip() if len(parts) > 1 else ""
        if entry['role'] == "user":
            symptoms = entry['content']
    
    summary = f"""
    The patient presented the following symptoms: {symptoms}.
    Based on the symptoms, the AI assistant diagnosed the patient with {diagnosed_disease}
    and recommended the following treatment plan: {treatment}.
    The patient is advised to follow up with a healthcare provider for further evaluation and treatment.
    """
    
    return summary.strip()

def create_symptom_chart(symptoms, percentages):
    drawing = Drawing(400, 200)
    data = [
        (70, 20, 10),  # Updated severity values as requested
    ]
    bc = VerticalBarChart()
    bc.x = 50
    bc.y = 50
    bc.height = 125
    bc.width = 300
    bc.data = data
    bc.strokeColor = colors.black
    bc.valueAxis.valueMin = 0
    bc.valueAxis.valueMax = 100
    bc.valueAxis.valueStep = 10
    bc.categoryAxis.labels.boxAnchor = 'ne'
    bc.categoryAxis.labels.dx = 8
    bc.categoryAxis.labels.dy = -2
    bc.categoryAxis.labels.angle = 30
    bc.categoryAxis.categoryNames = symptoms
    
    # Add percentage labels to the bars
    for i, value in enumerate(data[0]):
        label = Label()
        label.setOrigin(bc.x + i * (bc.width / len(data[0])) + 15, bc.y + value + 5)
        label.setText(f'{value}%\n({percentages[i]}%)')
        label.fontSize = 8
        label.textAnchor = 'middle'
        drawing.add(label)
    
    drawing.add(bc)
    
    return drawing

def generate_conversation_report(buffer, patient_info, conversation):
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='User', fontName='Helvetica', fontSize=10, leading=12))
    styles.add(ParagraphStyle(name='Assistant', fontName='Helvetica-Oblique', fontSize=10, leading=12))
    styles.add(ParagraphStyle(name='Heading', fontName='Helvetica-Bold', fontSize=12, leading=14, spaceAfter=12))
    
    story = []
    
    story.append(Paragraph("Medical Report", styles['Title']))
    story.append(Spacer(1, 12))
    
    # Patient Information
    patient_data = [[Paragraph(f"<b>{key}:</b>", styles['Normal']), Paragraph(value, styles['Normal'])] for key, value in patient_info.items()]
    patient_table = Table(patient_data, colWidths=[1.5*inch, 4*inch])
    patient_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ('TOPPADDING', (0, 0), (-1, -1), 6),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ]))
    story.append(patient_table)
    story.append(Spacer(1, 12))
    
    # Conversation
    story.append(Paragraph("Conversation", styles['Heading2']))
    
    data = []
    for entry in conversation:
        role = entry['role']
        content = entry['content']
        
        if role == "user":
            data.append([Paragraph("<b>User:</b>", styles['User']), Paragraph(content, styles['User'])])
        else:
            data.append([Paragraph("<b>Assistant:</b>", styles['Assistant']), Paragraph(content, styles['Assistant'])])
    
    table = Table(data, colWidths=[1.5 * inch, 5 * inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.white),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('TOPPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ]))
    
    story.append(table)
    story.append(Spacer(1, 12))
    
    # Summary
    summary = generate_summary(conversation)
    story.append(Paragraph("Summary", styles['Heading2']))
    story.append(Paragraph(summary, styles['Normal']))
    story.append(Spacer(1, 12))
    
    # Symptom Chart
    story.append(Paragraph("Symptom Severity Chart", styles['Heading2']))
    symptoms = ['Malaria', 'Fever', 'Typhoid fever']
    percentages = [50, 30, 20]  # Example percentages, adjust as needed
    chart = create_symptom_chart(symptoms, percentages)
    story.append(chart)
    
    doc.build(story, onFirstPage=header_footer, onLaterPages=header_footer)
    return buffer



# Redis Configuration

host = os.getenv("REDIS_UPSTASH_HOST")
password = os.getenv("REDIS_UPSTASH_PASSWORD")

redis_instance = Redis(
    host=host,
    port=6379,
    password=password,
    ssl=True
)

app.config["SESSION_TYPE"] = "redis"
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_USE_SIGNER"] = True
app.config["SESSION_REDIS"] = redis_instance

app.secret_key = os.getenv("SECRET_KEY", "fallback_secret_key")  # Use an environment variable for the secret key
app.permanent_session_lifetime = timedelta(minutes=30)

# Initialize the session extension
Session(app)

# CORS setup
CORS(app, supports_credentials=True, resources={r"/*": {"origins": [
    "http://localhost:5000", 
    "http://127.0.0.1:5000",
    "https://virtual-doctor-jade.vercel.com"  # Add your Vercel domain here
]}})

endpoint = os.getenv("API_ENDPOINT")

@app.route("/")
def home():
    return render_template("home.html")

# APP Routes for the English version
@app.route("/en/onboarding")
def en_onboarding():
    if not session.get("name") or session.get("language") != 'english':
        return redirect("/")
    return render_template("en/2-onboarding.html", name=session.get("name"))

@app.route("/en/select-assistant")
def en_select_assistant():
    if not session.get("name") or session.get("language") != 'english':
        return redirect("/")
    return render_template("en/3-select-assistant.html", name=session.get("name"))

@app.route("/en/select-input")
def en_select_input():
    if not session.get("name") or session.get("language") != 'english':
        return redirect("/")
    
    avatar_url = None
    avatar_voice = None
    avatar_body = None
    if "assistant" in session:
        if session["assistant"] == 'female':
            avatar_url = "https://models.readyplayer.me/6685cdb9539979578e51c626.glb?morphTargets=ARKit,Oculus+Visemes,mouthOpen,mouthSmile,eyesClosed,eyesLookUp,eyesLookDown&textureSizeLimit=1024&textureFormat=png"
            avatar_voice = "en-GB-Standard-A"
            avatar_body = 'F'
        elif session["assistant"] == 'male':
            avatar_url = "https://models.readyplayer.me/66841b4f3a3799e2f94177e8.glb?morphTargets=ARKit,Oculus+Visemes,mouthOpen,mouthSmile,eyesClosed,eyesLookUp,eyesLookDown&textureSizeLimit=1024&textureFormat=png"
            avatar_voice ="en-GB-Standard-B"
            avatar_body = 'M'
    else:
        return redirect('/en/select-assistant')
    return render_template("en/4-select-input.html", avatar_url=avatar_url, avatar_voice=avatar_voice, avatar_body=avatar_body)

@app.route("/en/text-input")
def en_text_input():
    if not session.get("name") or session.get("language") != 'english':
        return redirect("/")
    return render_template("en/5-text-input.html")

@app.route("/en/image-input")
def en_image_input():
    if not session.get("name") or session.get("language") != 'english':
        return redirect("/")
    return render_template("en/6-image-input.html")

@app.route("/en/face-scan")
def en_face_scan():
    if not session.get("name") or session.get("language") != 'english':
        return redirect("/")
    return render_template("en/7-face-scan-input.html")

@app.route("/en/report")
def en_report():
    if not session.get("name") or session.get("language") != 'english':
        return redirect("/")
    return render_template("en/8-report.html", 
                           disease1=session.get("disease1"),
                           disease2=session.get("disease2"),
                           disease3=session.get("disease3"))

@app.route("/en/chat", methods=['GET', 'POST'])
def en_chat():
    diagnosis_endpoint = f"{endpoint}/medicalai/api/v1/text-api"
    if not session.get("name") or session.get("language") != 'english':
        return redirect("/")
    
    if request.method == 'POST':
        message = request.json['message']
        session["chat"].append({
            "role": "user",
            "content": message
        })
        request_body = {
            "messages": session["chat"],
            "language": "en"
        }

        request_body = json.dumps(request_body, ensure_ascii=False)
        response = requests.post(diagnosis_endpoint, data=request_body)
        message = None
        if response.status_code == 200:
            response = response.json()
            session["chat"].append(response["result"])
            message = response["result"]["content"]
        else:
            message = "An Error occured with your request"

        return jsonify({"response": message})

    avatar_url = None
    avatar_voice = None
    avatar_body = None
    if "assistant" in session:
        if session["assistant"] == 'female':
            avatar_url = "https://models.readyplayer.me/6685cdb9539979578e51c626.glb?morphTargets=ARKit,Oculus+Visemes,mouthOpen,mouthSmile,eyesClosed,eyesLookUp,eyesLookDown&textureSizeLimit=1024&textureFormat=png"
            avatar_voice = "en-GB-Standard-A"
            avatar_body = 'F'
        elif session["assistant"] == 'male':
            avatar_url = "https://models.readyplayer.me/66841b4f3a3799e2f94177e8.glb?morphTargets=ARKit,Oculus+Visemes,mouthOpen,mouthSmile,eyesClosed,eyesLookUp,eyesLookDown&textureSizeLimit=1024&textureFormat=png"
            avatar_voice ="en-GB-Standard-B"
            avatar_body = 'M'
    else:
        return redirect('/en/select-assistant')

    return render_template("en/9-chat.html", avatar_url=avatar_url, avatar_voice=avatar_voice, avatar_body=avatar_body)



# APP Routes for the IGBO version
@app.route("/ig/onboarding")
def ig_onboarding():
    if not session.get("name") or session.get("language") != 'igbo':
        return redirect("/")
    return render_template("ig/2-onboarding.html", name=session.get("name"))

@app.route("/ig/select-assistant")
def ig_select_assistant():
    if not session.get("name") or session.get("language") != 'igbo':
        return redirect("/")
    return render_template("ig/3-select-assistant.html", name=session.get("name"))

@app.route("/ig/select-input")
def ig_select_input():
    if not session.get("name") or session.get("language") != 'igbo':
        return redirect("/")
    avatar_url = None
    avatar_voice = None
    avatar_body = None
    if "assistant" in session:
        if session["assistant"] == 'female':
            avatar_url = "https://models.readyplayer.me/6685cdb9539979578e51c626.glb?morphTargets=ARKit,Oculus+Visemes,mouthOpen,mouthSmile,eyesClosed,eyesLookUp,eyesLookDown&textureSizeLimit=1024&textureFormat=png"
            avatar_voice = "en-GB-Standard-A"
            avatar_body = 'F'
        elif session["assistant"] == 'male':
            avatar_url = "https://models.readyplayer.me/66841b4f3a3799e2f94177e8.glb?morphTargets=ARKit,Oculus+Visemes,mouthOpen,mouthSmile,eyesClosed,eyesLookUp,eyesLookDown&textureSizeLimit=1024&textureFormat=png"
            avatar_voice ="en-GB-Standard-B"
            avatar_body = 'M'
        else:
            return redirect('/ig/select-assistant')
    return render_template("ig/4-select-input.html", avatar_url=avatar_url, avatar_voice=avatar_voice, avatar_body=avatar_body)

@app.route("/ig/text-input")
def ig_text_input():
    if not session.get("name") or session.get("language") != 'igbo':
        return redirect("/")
    return render_template("ig/5-text-input.html")

@app.route("/ig/image-input")
def ig_image_input():
    if not session.get("name") or session.get("language") != 'igbo':
        return redirect("/")
    return render_template("ig/6-image-input.html")

@app.route("/ig/face-scan")
def ig_face_scan():
    if not session.get("name") or session.get("language") != 'igbo':
        return redirect("/")
    return render_template("ig/7-face-scan-input.html")

@app.route("/ig/report")
def ig_report():
    if not session.get("name") or session.get("language") != 'igbo':
        return redirect("/")
    return render_template("ig/8-report.html", 
                           disease1=session.get("disease1"),
                           disease2=session.get("disease2"),
                           disease3=session.get("disease3"))

@app.route("/ig/chat", methods=['GET', 'POST'])
def ig_chat():
    diagnosis_endpoint = f"{endpoint}/medicalai/api/v1/text-api"
    if not session.get("name") or session.get("language") != 'igbo':
        return redirect("/")
    if request.method == 'POST':
        message = request.json['message']
        session["chat"].append({
            "role": "user",
            "content": message
        })
        request_body = {
            "messages": session["chat"],
            "language": "ig"
        }
        request_body = json.dumps(request_body, ensure_ascii=False)
        response = requests.post(diagnosis_endpoint, data=request_body)
        message = None
        if response.status_code == 200:
            response = response.json()
            session["chat"].append(response["result"])
            message = response["result"]["content"]
        else:
            message = "Mperi dapụtara na arịrịọ gị"
        return jsonify({"response": message})
    avatar_url = None
    avatar_voice = None
    avatar_body = None
    if "assistant" in session:
        if session["assistant"] == 'female':
            avatar_url = "https://models.readyplayer.me/6685cdb9539979578e51c626.glb?morphTargets=ARKit,Oculus+Visemes,mouthOpen,mouthSmile,eyesClosed,eyesLookUp,eyesLookDown&textureSizeLimit=1024&textureFormat=png"
            avatar_voice = "en-GB-Standard-A"
            avatar_body = 'F'
        elif session["assistant"] == 'male':
            avatar_url = "https://models.readyplayer.me/66841b4f3a3799e2f94177e8.glb?morphTargets=ARKit,Oculus+Visemes,mouthOpen,mouthSmile,eyesClosed,eyesLookUp,eyesLookDown&textureSizeLimit=1024&textureFormat=png"
            avatar_voice ="en-GB-Standard-B"
            avatar_body = 'M'
        else:
            return redirect('/ig/select-assistant')
    return render_template("ig/9-chat.html", avatar_url=avatar_url, avatar_voice=avatar_voice, avatar_body=avatar_body)




@app.route('/api/language', methods=["POST"])
def language_select():
    data = request.json
    session["name"] = data.get('name')
    session["language"] = data.get('language')
    return jsonify({}), 200

@app.route('/api/assistant', methods=["POST"])
def assistant_select():
    data = request.json
    assistant = data.get('assistant')
    if assistant not in ['male', 'female']:
        return jsonify({}), 400
    else:
        session["assistant"] = assistant
        return jsonify({}), 200

@app.route('/api/diagnosis', methods=["POST"])
def diagnosis():
    diagnosis_endpoint = f"{endpoint}/medicalai/api/v1/diagnosis-api"
    data = request.json
    language = data.get('language')
    symptoms = data.get('symptoms')
    request_body = {
        "symptoms": symptoms,
        "language": language
    }
    request_body = json.dumps(request_body, ensure_ascii=False)
    response = requests.post(diagnosis_endpoint, data=request_body)
    data = response.json()

    # Process the response
    diagnosis_text = data.get('diagnosis', '')
    lines = diagnosis_text.split('\n')
    session["chat"] = [
        {
            "role" : "assistant",
            "content": diagnosis_text
        },
        {
            "role": "user",
            "content": "Thank you very much"
        },
        {
            "role" : "assistant",
            "content": "Are you okay with your diagnosis"
        }
    ]
    if len(lines) >= 3:
        # Extract treatment
        treatment = lines[1].replace('Treatment is: ', '').strip()
        session['treatment'] = treatment
        # Extract diseases
        diseases = lines[2].split('-')
        session['disease1'] = diseases[0] if len(diseases) > 0 else ''
        session['disease2'] = diseases[1] if len(diseases) > 1 else ''
        session['disease3'] = diseases[2] if len(diseases) > 2 else ''

    return jsonify({}), 200

@app.route('/generate_report', methods=['POST'])
def generate_report():
    # In a real application, you'd get this data from the request
    patient_info = {
        "Name": session.get("name"),
        "Age": "45",
        "Gender": "Male",
        "Patient ID": "123456"
    }

    conversation = session["chat"]

    # Create a BytesIO object to store the PDF
    pdf_buffer = io.BytesIO()

    # Generate the report
    generate_conversation_report(pdf_buffer, patient_info, conversation)

    # Move the buffer's cursor to the beginning
    pdf_buffer.seek(0)

    # Send the file
    return send_file(
        pdf_buffer,
        mimetype='application/pdf',
        as_attachment=True,
        download_name='medical_report.pdf'
    )


if __name__ == "__main__":
    app.run(debug=True)